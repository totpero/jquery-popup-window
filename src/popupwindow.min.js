/***************************************************************************************************
PopupWindow - The ultimate popup/dialog/modal jQuery plugin
    Author          : Gaspare Sganga
    Version         : 1.0.4
    License         : MIT
    Documentation   : http://gasparesganga.com/labs/jquery-popup-window/
***************************************************************************************************/
!function (t, e) {
    function i(i, n) {
      if (i.closest('.popupwindow').length) D('jQuery PopupWindow is already initialized on this element');
       else {
        var a = t.extend(!0, {
        }, Q, n);
        a.animationTime = parseInt(a.animationTime, 10),
        a.height = parseInt(a.height, 10),
        a.width = parseInt(a.width, 10),
        a.maxHeight = parseInt(a.maxHeight, 10) || 0,
        a.maxWidth = parseInt(a.maxWidth, 10) || 0,
        a.minHeight = parseInt(a.minHeight, 10) || 0,
        a.minWidth = parseInt(a.minWidth, 10) || 0;
        var s = t('<div>', {
          'class': 'popupwindow_overlay'
        }).css(R.overlay).appendTo(q);
        a.modal && s.css('pointer-events', 'auto');
        var r = t('<div>', {
          'class': 'popupwindow_minplaceholder'
        }).css(R.minplaceholder).hide().appendTo(q),
        d = {
          width: a.width,
          height: a.height
        };
        T(d, a);
        var p = {
          top: 'auto' == a.top ? (s.height() - d.height) / 2 : parseInt(a.top, 10),
          left: 'auto' == a.left ? (s.width() - d.width) / 2 : parseInt(a.left, 10)
        };
        a.keepInViewport && f(p, d);
        var l = t('<div>', {
          'class': 'popupwindow',
          css: {
            top: p.top,
            left: p.left,
            width: d.width,
            height: d.height
          }
        }).css(R.popupwindow).addClass(a.customClass).data({
          originalTarget: i,
          originalParent: i.parent(),
          overlay: s,
          minPlaceholder: r,
          settings: a,
          opened: !1,
          collapsed: !1,
          minimized: !1,
          maximized: !1,
          currentPosition: p,
          currentSize: d,
          savedPosition: e,
          savedSize: e
        }).on('mousedown', '.popupwindow_titlebar_draggable', F).appendTo(s),
        h = a.buttonsPosition.toLowerCase().indexOf('l') < 0,
        w = t('<div>', {
          'class': 'popupwindow_titlebar'
        }).css(R.titlebar).appendTo(l);
        a.draggable && w.addClass('popupwindow_titlebar_draggable'),
        t('<div>', {
          'class': 'popupwindow_titlebar_text',
          text: a.title
        }).css(R.titlebar_text).css('order', h ? 1 : 5).appendTo(w),
        a.buttons.close && t('<div>', {
          'class': 'popupwindow_titlebar_button popupwindow_titlebar_button_close'
        }).css(R.titlebar_button).css('order', h ? 5 : 1).attr('title', a.buttonsTexts.close).on('click', M).append(G.close).appendTo(w),
        a.buttons.maximize && t('<div>', {
          'class': 'popupwindow_titlebar_button popupwindow_titlebar_button_maximize'
        }).css(R.titlebar_button).css('order', h ? 4 : 2).attr('title', a.buttonsTexts.maximize).on('click', B).append(G.maximize).appendTo(w),
        a.buttons.collapse && t('<div>', {
          'class': 'popupwindow_titlebar_button popupwindow_titlebar_button_collapse'
        }).css(R.titlebar_button).css('order', 3).attr('title', a.buttonsTexts.collapse).on('click', E).append(G.collapse).appendTo(w),
        a.buttons.minimize && t('<div>', {
          'class': 'popupwindow_titlebar_button popupwindow_titlebar_button_minimize'
        }).css(R.titlebar_button).css('order', h ? 2 : 4).attr('title', a.buttonsTexts.minimize).on('click', A).append(G.minimize).appendTo(w);
        var u = t('<div>', {
          'class': 'popupwindow_content'
        }).css(R.content).appendTo(l);
        if (i.show().appendTo(u), a.statusBar) {
          var c = t('<div>', {
            'class': 'popupwindow_statusbar'
          }).css(R.statusbar).appendTo(l);
          t('<div>', {
            'class': 'popupwindow_statusbar_content'
          }).css(R.statusbar_content).appendTo(c);
          var m = t('<div>', {
            'class': 'popupwindow_statusbar_handle'
          }).css(R.statusbar_handle).appendTo(c);
          a.resizable && m.css(R.statusbar_handle_resizable).append(G.resizeHandle).on('mousedown', null, {
            dimension: 'both',
            directionX: 'right',
            directionY: 'bottom'
          }, L)
        }
        if (a.resizable) {
          var g = P(l);
          t('<div>', {
            'class': 'popupwindow_resizer popupwindow_resizer_top',
            css: {
              top: 0 - g.top - J.resizersWidth / 2,
              height: g.top + J.resizersWidth
            }
          }).css(R.resizer_top).on('mousedown', null, {
            dimension: 'height',
            directionY: 'top'
          }, L).appendTo(l),
          t('<div>', {
            'class': 'popupwindow_resizer popupwindow_resizer_bottom',
            css: {
              bottom: 0 - g.bottom - J.resizersWidth / 2,
              height: g.bottom + J.resizersWidth
            }
          }).css(R.resizer_bottom).on('mousedown', null, {
            dimension: 'height',
            directionY: 'bottom'
          }, L).appendTo(l),
          t('<div>', {
            'class': 'popupwindow_resizer popupwindow_resizer_left',
            css: {
              left: 0 - g.left - J.resizersWidth / 2,
              width: g.left + J.resizersWidth
            }
          }).css(R.resizer_left).on('mousedown', null, {
            dimension: 'width',
            directionX: 'left'
          }, L).appendTo(l),
          t('<div>', {
            'class': 'popupwindow_resizer popupwindow_resizer_right',
            css: {
              right: 0 - g.right - J.resizersWidth / 2,
              width: g.right + J.resizersWidth
            }
          }).css(R.resizer_right).on('mousedown', null, {
            dimension: 'width',
            directionX: 'right'
          }, L).appendTo(l),
          t('<div>', {
            'class': 'popupwindow_resizer popupwindow_resizer_topleft',
            css: {
              top: 0 - g.top - J.resizersWidth / 2,
              left: 0 - g.left - J.resizersWidth / 2,
              width: g.left + J.resizersWidth,
              height: g.top + J.resizersWidth
            }
          }).css(R.resizer_topleft).on('mousedown', null, {
            dimension: 'both',
            directionX: 'left',
            directionY: 'top'
          }, L).appendTo(l),
          t('<div>', {
            'class': 'popupwindow_resizer popupwindow_resizer_topright',
            css: {
              top: 0 - g.top - J.resizersWidth / 2,
              right: 0 - g.right - J.resizersWidth / 2,
              width: g.right + J.resizersWidth,
              height: g.top + J.resizersWidth
            }
          }).css(R.resizer_topright).on('mousedown', null, {
            dimension: 'both',
            directionX: 'right',
            directionY: 'top'
          }, L).appendTo(l),
          t('<div>', {
            'class': 'popupwindow_resizer popupwindow_resizer_bottomleft',
            css: {
              bottom: 0 - g.bottom - J.resizersWidth / 2,
              left: 0 - g.left - J.resizersWidth / 2,
              width: g.left + J.resizersWidth,
              height: g.bottom + J.resizersWidth
            }
          }).css(R.resizer_bottomleft).on('mousedown', null, {
            dimension: 'both',
            directionX: 'left',
            directionY: 'bottom'
          }, L).appendTo(l),
          t('<div>', {
            'class': 'popupwindow_resizer popupwindow_resizer_bottomright',
            css: {
              bottom: 0 - g.bottom - J.resizersWidth / 2,
              right: 0 - g.right - J.resizersWidth / 2,
              width: g.right + J.resizersWidth,
              height: g.bottom + J.resizersWidth
            }
          }).css(R.resizer_bottomright).on('mousedown', null, {
            dimension: 'both',
            directionX: 'right',
            directionY: 'bottom'
          }, L).appendTo(l)
        }
        a.modal || s.width(0).height(0),
        s.hide(),
        a.autoOpen && o(l)
      }
    }
    function o(t) {
      V(t) && !t.data('opened') && (t.data('overlay').show(), t.data('opened', !0), O(t, 'open'), t.data('collapsed') ? d(t) : t.data('minimized') ? l(t) : t.data('maximized') || k(t))
    }
    function n(t) {
      V(t) && t.data('opened') && (t.data('minimized') && l(t), t.data('overlay').hide(), t.data('opened', !1), O(t, 'close'))
    }
    function a(e) {
      if (V(e) && e.data('opened') && !e.data('maximized') && !e.data('collapsed') && !e.data('minimized')) {
        var i = e.data('settings');
        e.find('.popupwindow_titlebar_button_maximize').empty().append(G.unmaximize).attr('title', i.buttonsTexts.unmaximize),
        e.find('.popupwindow_resizer, .popupwindow_titlebar_button_collapse').hide(),
        e.find('.popupwindow_statusbar_handle').css('visibility', 'hidden'),
        i.draggable && e.find('.popupwindow_titlebar').removeClass('popupwindow_titlebar_draggable'),
        i.modal || e.data('overlay').css('background-color', 'transparent').width('100%').height('100%'),
        c(e),
        x(e);
        var o = g(e, {
          top: 0,
          left: 0
        }),
        n = _(e, {
          width: '100%',
          height: '100%'
        });
        return t.when(o, n).then(function () {
          e.data('maximized', !0),
          O(e, 'maximize')
        })
      }
    }
    function s(e) {
      if (V(e) && e.data('opened') && e.data('maximized')) {
        var i = e.data('settings'),
        o = m(e),
        n = v(e);
        return e.find('.popupwindow_titlebar_button_maximize').empty().append(G.maximize).attr('title', i.buttonsTexts.maximize),
        e.find('.popupwindow_resizer, .popupwindow_titlebar_button_collapse').show(),
        e.find('.popupwindow_statusbar_handle').css('visibility', 'visible'),
        i.draggable && e.find('.popupwindow_titlebar').addClass('popupwindow_titlebar_draggable'),
        i.modal || e.data('overlay').width(0).height(0).css('background-color', ''),
        t.when(o, n).then(function () {
          e.data('maximized', !1),
          O(e, 'unmaximize')
        })
      }
    }
    function r(i) {
      if (V(i) && i.data('opened') && !i.data('maximized') && !i.data('collapsed') && !i.data('minimized')) {
        var o = i.data('settings');
        i.find('.popupwindow_titlebar_button_collapse').empty().append(G.uncollapse).attr('title', o.buttonsTexts.uncollapse),
        i.find('.popupwindow_content, .popupwindow_statusbar, .popupwindow_resizer, .popupwindow_titlebar_button_maximize, .popupwindow_titlebar_button_minimize').hide(),
        x(i);
        var n = _(i, {
          width: o.collapsedWidth,
          height: P(i, 'top') + P(i, 'bottom') + i.find('.popupwindow_titlebar').outerHeight()
        });
        return t.when(n).then(function () {
          i.data('collapsed', !0),
          O(i, 'collapse'),
          o.collapsedWidth !== e && k(i)
        })
      }
    }
    function d(e) {
      if (V(e) && e.data('opened') && e.data('collapsed')) {
        var i = e.data('settings'),
        o = v(e);
        return e.find('.popupwindow_titlebar_button_collapse').empty().append(G.collapse).attr('title', i.buttonsTexts.collapse),
        e.find('.popupwindow_content, .popupwindow_statusbar, .popupwindow_resizer, .popupwindow_titlebar_button_maximize, .popupwindow_titlebar_button_minimize').show(),
        t.when(o).then(function () {
          e.data('collapsed', !1),
          O(e, 'uncollapse')
        })
      }
    }
    function p(e) {
      if (V(e) && e.data('opened') && !e.data('collapsed') && !e.data('minimized')) {
        var i,
        o = t.Deferred(),
        n = e.data('settings');
        if (e.data('maximized')) {
          var a = n.animationTime;
          n.animationTime = n.animationTime / J.secondaryAnimationTimeFactor,
          i = s(e),
          n.animationTime = a
        } else c(e),
        x(e),
        i = t.Deferred().resolve();
        return t.when(i).then(function () {
          e.addClass('popupwindow_minimized').width(''),
          e.find('.popupwindow_titlebar_button_minimize').attr('title', n.buttonsTexts.unminimize),
          e.find('.popupwindow_content, .popupwindow_statusbar, .popupwindow_resizer, .popupwindow_titlebar_button_maximize, .popupwindow_titlebar_button_collapse').hide(),
          n.draggable && e.find('.popupwindow_titlebar').removeClass('popupwindow_titlebar_draggable');
          var i = e.data('minPlaceholder'),
          a = {
            width: e.outerWidth(),
            height: P(e, 'top') + P(e, 'bottom') + e.find('.popupwindow_titlebar').outerHeight()
          };
          i.outerWidth(a.width).outerHeight(a.height).show();
          var s = {
          },
          r = i.position();
          'horizontal' == K.direction ? (s.width = a.width, i.width(0)) : (s.height = a.height, i.height(0));
          var d = g(e, r),
          p = _(e, {
            height: a.height
          });
          i.animate(s, {
            duration: n.animationTime,
            queue: !1,
            complete: function () {
              t(this).hide(),
              e.css({
                position: 'relative',
                top: '',
                left: ''
              }).insertAfter(e.data('overlay'))
            }
          }),
          t.when(d, p).then(function () {
            e.data('minimized', !0),
            O(e, 'minimize'),
            o.resolve()
          })
        }),
        o.promise()
      }
    }
    function l(e) {
      if (V(e) && e.data('opened') && e.data('minimized')) {
        var i = e.data('settings'),
        o = e.data('minPlaceholder');
        e.removeClass('popupwindow_minimized'),
        e.find('.popupwindow_titlebar_button_minimize').attr('title', i.buttonsTexts.minimize),
        e.find('.popupwindow_content, .popupwindow_statusbar, .popupwindow_resizer, .popupwindow_titlebar_button_maximize, .popupwindow_titlebar_button_collapse').show(),
        i.draggable && e.find('.popupwindow_titlebar').addClass('popupwindow_titlebar_draggable'),
        o.show().insertAfter(e.data('overlay'));
        var n = {
          width: o.outerWidth(),
          height: o.outerHeight()
        },
        a = {
        },
        s = o.position();
        'horizontal' == K.direction ? (a.width = 0, o.width(n.width)) : (a.height = 0, o.height(n.height)),
        e.css({
          position: 'absolute',
          top: s.top,
          left: s.left,
          width: n.width
        }).appendTo(e.data('overlay'));
        var r = m(e),
        d = v(e);
        return o.animate(a, {
          duration: i.animationTime,
          queue: !1,
          complete: function () {
            t(this).hide()
          }
        }),
        t.when(r, d).then(function () {
          e.data('minimized', !1),
          O(e, 'unminimize')
        })
      }
    }
    function h(t) {
      if (V(t)) {
        var e = t.data('originalTarget');
        e.appendTo(t.data('originalParent')),
        t.data('minimized') ? t.remove() : t.data('overlay').remove(),
        e.trigger('destroy.popupwindow')
      }
    }
    function w(i) {
      return V(i) ? t.extend({
      }, i.data('currentPosition')) : e
    }
    function u(e, i) {
      t.extend(e.data('currentPosition'), i)
    }
    function c(t) {
      t.data('savedPosition', w(t))
    }
    function m(t) {
      return g(t, t.data('savedPosition'))
    }
    function g(i, o) {
      var n = t.Deferred(),
      a = i.data('settings'),
      s = o.animationTime !== e ? parseInt(o.animationTime) : a.animationTime,
      r = {
        top: o.top,
        left: o.left
      };
      o.check && a.keepInViewport && f(r, b(i));
      var d = w(i);
      return d.top != r.top || d.left != r.left ? i.animate(r, {
        duration: s,
        queue: !1,
        complete: function () {
          u(i, r),
          o.event && O(i, 'move'),
          n.resolve()
        }
      }) : n.resolve(),
      n.promise()
    }
    function f(e, i) {
      var o = t(window);
      e.top > o.height() - i.height && (e.top = o.height() - i.height),
      e.left > o.width() - i.width && (e.left = o.width() - i.width),
      e.top < 0 && (e.top = 0),
      e.left < 0 && (e.left = 0)
    }
    function b(i) {
      return V(i) ? t.extend({
      }, i.data('currentSize')) : e
    }
    function z(e, i) {
      t.extend(e.data('currentSize'), i)
    }
    function x(t) {
      t.data('savedSize', b(t))
    }
    function v(e) {
      return _(e, t.extend({
        check: !1,
        event: !1
      }, e.data('savedSize'))).done(function () {
        k(e)
      })
    }
    function _(i, o) {
      var n = t.Deferred(),
      a = i.data('settings'),
      s = o.animationTime !== e ? parseInt(o.animationTime) : a.animationTime,
      r = {
        width: o.width
      };
      if (o.height !== e && (r.height = o.height), o.check) if (a.keepInViewport && T(r, a), i.data('closed')) s = 0;
       else if (i.data('collapsed')) o.external && t.extend(i.data('savedSize'), r),
      delete r.height;
       else if (i.data('minimized') || i.data('maximized')) return void t.extend(i.data('savedSize'), r);
      var d = b(i);
      return d.width != r.width || r.height !== e && d.height != r.height ? i.animate(r, {
        duration: s,
        queue: !1,
        complete: function () {
          z(i, r),
          o.event && O(i, 'resize'),
          n.resolve()
        }
      }) : n.resolve(),
      n.promise()
    }
    function T(i, o) {
      var n = t(window);
      if (i.width !== e) {
        var a = Math.min(n.width(), o.maxWidth || Number.POSITIVE_INFINITY);
        i.width > a && (i.width = a),
        o.minWidth && i.width < o.minWidth && (i.width = o.minWidth)
      }
      if (i.height !== e) {
        var s = Math.min(n.height(), o.maxHeight || Number.POSITIVE_INFINITY);
        i.height > s && (i.height = s),
        o.minHeight && i.height < o.minHeight && (i.height = o.minHeight)
      }
    }
    function y(e) {
      return e.data('settings').keepInViewport ? g(e, t.extend({
        animationTime: e.data('settings').animationTime / J.secondaryAnimationTimeFactor,
        check: !0,
        event: !0
      }, w(e))) : void 0
    }
    function W(e) {
      if (e.data('settings').keepInViewport) {
        var i = b(e);
        return e.data('collapsed') && delete i.height,
        _(e, t.extend({
          animationTime: e.data('settings').animationTime / J.secondaryAnimationTimeFactor,
          check: !0,
          event: !0
        }, i))
      }
    }
    function k(e) {
      e.data('settings').keepInViewport && t.when(y(e)).done(function () {
        W(e)
      })
    }
    function I(t) {
      return t.length ? t.data('opened') ? t.data('minimized') ? 'minimized' : t.data('collapsed') ? 'collapsed' : t.data('maximized') ? 'maximized' : 'normal' : 'closed' : e
    }
    function Y(t, e) {
      if (V(t)) switch (e.toLowerCase()) {
        case 'normal':
          t.data('opened') || o(t),
          t.data('minimized') && l(t),
          t.data('collapsed') && d(t),
          t.data('maximized') && s(t);
          break;
        case 'closed':
          n(t);
          break;
        case 'maximized':
          a(t);
          break;
        case 'unmaximized':
          s(t);
          break;
        case 'collapsed':
          r(t);
          break;
        case 'uncollapsed':
          d(t);
          break;
        case 'minimized':
          p(t);
          break;
        case 'unminimized':
          l(t)
      }
    }
    function X(t, e) {
      V(t) && (t.data('settings').title = e, t.find('.popupwindow_titlebar_text').text(e))
    }
    function H(t, e) {
      V(t) && t.find('.popupwindow_statusbar_content').html(e)
    }
    function P(t, i) {
      return i !== e ? parseInt(t.css('border-' + i + '-width'), 10) : {
        top: parseInt(t.css('border-top-width'), 10),
        bottom: parseInt(t.css('border-bottom-width'), 10),
        left: parseInt(t.css('border-left-width'), 10),
        right: parseInt(t.css('border-right-width'), 10)
      }
    }
    function C(e) {
      e.popupWindow.fadeTo(0, e.opacity),
      e.popupWindow.data('settings').mouseMoveEvents || e.popupWindow.data('tempSavedData', {
        position: w(e.popupWindow),
        size: b(e.popupWindow)
      }),
      t(document).on('mousemove', e, N).on('mouseup', e, j)
    }
    function O(t, e) {
      var i;
      'move' == e && (i = w(t)),
      'resize' == e && (i = b(t)),
      t.data('originalTarget').trigger(e + '.popupwindow', i)
    }
    function S() {
      var t = {
      };
      'horizontal' == K.direction ? (t['flex-direction'] = K.position.indexOf('left') >= 0 ? 'row' : 'row-reverse', t['flex-wrap'] = K.position.indexOf('top') >= 0 ? 'wrap' : 'wrap-reverse') : (t['flex-direction'] = K.position.indexOf('top') >= 0 ? 'column' : 'column-reverse', t['flex-wrap'] = K.position.indexOf('left') >= 0 ? 'wrap' : 'wrap-reverse'),
      q.css(t)
    }
    function V(t) {
      return !!t.length || (D('jQuery PopupWindow is not initialized on this element'), !1)
    }
    function D(t) {
      t = 'jQuery PopupWindow Warning: ' + t,
      window.console.warn ? console.warn(t) : window.console.log && console.log(t)
    }
    function M(e) {
      n(t(e.currentTarget).closest('.popupwindow'))
    }
    function B(e) {
      var i = t(e.currentTarget).closest('.popupwindow');
      i.data('maximized') ? s(i) : a(i)
    }
    function E(e) {
      var i = t(e.currentTarget).closest('.popupwindow');
      i.data('collapsed') ? d(i) : r(i)
    }
    function A(e) {
      var i = t(e.currentTarget).closest('.popupwindow');
      i.data('minimized') ? l(i) : p(i)
    }
    function F(e) {
      if (e.target !== e.currentTarget && !t(e.target).hasClass('popupwindow_titlebar_text')) return !1;
      var i = t(e.currentTarget).closest('.popupwindow'),
      o = w(i),
      n = i.data('settings');
      n.modal || i.data('overlay').css('background-color', 'transparent').width('100%').height('100%'),
      C({
        popupWindow: i,
        action: 'drag',
        opacity: n.dragOpacity,
        compensationX: e.pageX - o.left,
        compensationY: e.pageY - o.top
      }),
      e.preventDefault()
    }
    function L(e) {
      var i = t(e.currentTarget).closest('.popupwindow'),
      o = w(i),
      n = b(i);
      C({
        popupWindow: i,
        action: 'resize',
        dimension: e.data.dimension,
        directionX: e.data.directionX,
        directionY: e.data.directionY,
        opacity: i.data('settings').resizeOpacity,
        startX: e.pageX + ('left' == e.data.directionX ? n.width : - n.width),
        startY: e.pageY + ('top' == e.data.directionY ? n.height : - n.height),
        compensationX: e.pageX - o.left,
        compensationY: e.pageY - o.top,
        windowWidth: t(window).width(),
        windowHeight: t(window).height()
      }),
      e.preventDefault()
    }
    function N(t) {
      var i = t.data.popupWindow,
      o = i.data('settings'),
      n = w(i),
      a = b(i),
      s = {
      },
      r = {
      };
      switch (t.data.action) {
        case 'drag':
          s.top = t.pageY - t.data.compensationY,
          s.left = t.pageX - t.data.compensationX,
          o.keepInViewport && f(s, b(i));
          break;
        case 'resize':
          if ('height' != t.data.dimension && (!o.keepInViewport || t.clientX > 0 && t.clientX <= t.data.windowWidth)) {
            var d = 'left' == t.data.directionX ? t.data.startX - t.pageX : t.pageX - t.data.startX;
            d >= o.minWidth && (!o.maxWidth || d <= o.maxWidth) && (r.width = d, 'left' == t.data.directionX && (s.left = t.pageX - t.data.compensationX))
          }
          if ('width' != t.data.dimension && (!o.keepInViewport || t.clientY > 0 && t.clientY <= t.data.windowHeight)) {
            var p = 'top' == t.data.directionY ? t.data.startY - t.pageY : t.pageY - t.data.startY;
            p >= o.minHeight && (!o.maxHeight || p <= o.maxHeight) && (r.height = p, 'top' == t.data.directionY && (s.top = t.pageY - t.data.compensationY))
          }
      }(s.top !== e && s.top != n.top || s.left !== e && s.left != n.left) && (i.css(s), u(i, s), o.mouseMoveEvents && O(i, 'move')),
      (r.width !== e && r.width != a.width || r.height !== e && r.height != a.height) && (i.outerWidth(r.width).outerHeight(r.height), z(i, r), o.mouseMoveEvents && O(i, 'resize'))
    }
    function j(e) {
      var i = e.data.popupWindow,
      o = i.data('settings');
      if (i.fadeTo(0, 1), t(document).off('mousemove', N).off('mouseup', j), o.modal || i.data('overlay').width(0).height(0).css('background-color', ''), !o.mouseMoveEvents) {
        var n = w(i),
        a = b(i),
        s = i.data('tempSavedData');
        (s.position.top != n.top || s.position.left != n.left) && O(i, 'move'),
        (s.size.width != a.width || s.size.height != a.height) && O(i, 'resize'),
        i.removeData('tempSavedData')
      }
    }
    var q,
    Q = {
      title: 'Popup Window',
      modal: !0,
      autoOpen: !0,
      animationTime: 300,
      customClass: '',
      buttons: {
        close: !0,
        maximize: !0,
        collapse: !0,
        minimize: !0
      },
      buttonsPosition: 'right',
      buttonsTexts: {
        close: 'Close',
        maximize: 'Maximize',
        unmaximize: 'Restore',
        minimize: 'Minimize',
        unminimize: 'Show',
        collapse: 'Collapse',
        uncollapse: 'Expand'
      },
      draggable: !0,
      dragOpacity: 0.6,
      resizable: !0,
      resizeOpacity: 0.6,
      statusBar: !0,
      top: 'auto',
      left: 'auto',
      height: 200,
      width: 400,
      maxHeight: e,
      maxWidth: e,
      minHeight: 100,
      minWidth: 200,
      collapsedWidth: e,
      keepInViewport: !0,
      mouseMoveEvents: !0
    },
    R = {
      container: {
        'box-sizing': 'border-box',
        position: 'fixed',
        top: '0',
        bottom: '0',
        right: '0',
        left: '0',
        display: 'flex',
        'justify-content': 'flex-start',
        'align-content': 'flex-start',
        'pointer-events': 'none'
      },
      overlay: {
        'box-sizing': 'border-box',
        position: 'fixed',
        top: '0',
        left: '0',
        width: '100%',
        height: '100%'
      },
      minplaceholder: {
        'box-sizing': 'border-box',
        background: 'transparent',
        border: 'none'
      },
      popupwindow: {
        'box-sizing': 'border-box',
        display: 'flex',
        'flex-flow': 'column nowrap',
        position: 'absolute',
        padding: '0',
        'pointer-events': 'auto'
      },
      titlebar: {
        'box-sizing': 'border-box',
        flex: '0 0 auto',
        display: 'flex',
        'align-items': 'center'
      },
      titlebar_text: {
        'box-sizing': 'border-box',
        flex: '1 1 auto',
        overflow: 'hidden',
        'text-overflow': 'ellipsis',
        'white-space': 'nowrap'
      },
      titlebar_button: {
        'box-sizing': 'border-box',
        flex: '0 0 auto',
        display: 'flex'
      },
      content: {
        flex: '1 1 auto',
        overflow: 'auto'
      },
      statusbar: {
        'box-sizing': 'border-box',
        flex: '0 0 auto',
        display: 'flex',
        'align-items': 'flex-end'
      },
      statusbar_content: {
        'box-sizing': 'border-box',
        flex: '1 1 auto',
        overflow: 'hidden',
        'text-align': 'left',
        'text-overflow': 'ellipsis',
        'white-space': 'nowrap'
      },
      statusbar_handle: {
        'box-sizing': 'border-box',
        display: 'flex'
      },
      statusbar_handle_resizable: {
        cursor: 'se-resize'
      },
      resizer_top: {
        position: 'absolute',
        left: '0',
        right: '0',
        cursor: 'n-resize'
      },
      resizer_bottom: {
        position: 'absolute',
        left: '0',
        right: '0',
        cursor: 's-resize'
      },
      resizer_left: {
        position: 'absolute',
        top: '0',
        bottom: '0',
        cursor: 'e-resize'
      },
      resizer_right: {
        position: 'absolute',
        top: '0',
        bottom: '0',
        cursor: 'w-resize'
      },
      resizer_topleft: {
        position: 'absolute',
        cursor: 'nw-resize'
      },
      resizer_topright: {
        position: 'absolute',
        cursor: 'ne-resize'
      },
      resizer_bottomleft: {
        position: 'absolute',
        cursor: 'ne-resize'
      },
      resizer_bottomright: {
        position: 'absolute',
        cursor: 'nw-resize'
      }
    },
    G = {
      close: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 10 10" height="100%" width="100%"><g><line y2="0" x2="10" y1="10" x1="0"/><line y2="10" x2="10" y1="0" x1="0"/></g></svg>',
      collapse: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 10 10" height="100%" width="100%"><g fill="none"><polyline points="1,7 9,7 5,2 1,7 9,7"/></g></svg>',
      uncollapse: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 10 10" height="100%" width="100%"><g fill="none"><polyline points="1,3 9,3 5,8 1,3 9,3"/></g></svg>',
      maximize: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 10 10" height="100%" width="100%"><g fill="none"><rect x="1" y="1" height="8" width="8"/></g></svg>',
      unmaximize: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 10 10" height="100%" width="100%"><g fill="none"><rect x="1" y="3" height="6" width="6"/><line y1="3" x1="3" y2="1" x2="3"/><line y1="1" x1="2.5" y2="1" x2="9.5"/><line y1="1" x1="9" y2="7" x2="9"/><line y1="7" x1="9.5" y2="7" x2="7"/></g></svg>',
      minimize: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 10 10" height="100%" width="100%"><g><line y1="6" x1="8" y2="6" x2="2"/></g></svg>',
      resizeHandle: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 10 10" height="100%" width="100%"><g><line y2="0" x2="10" y1="10" x1="0"/><line y2="2" x2="12" y1="12" x1="2"/><line y2="4" x2="14" y1="14" x1="4"/></g></svg>'
    },
    J = {
      resizersWidth: 4,
      secondaryAnimationTimeFactor: 3
    },
    K = {
      position: 'bottom left',
      direction: 'horizontal'
    };
    t.PopupWindowSetup = function (e) {
      t.extend(!0, Q, e)
    },
    t.PopupWindowMinimizedArea = function (i) {
      return i === e ? t.extend({
      }, K) : (i.position && (K.position = (i.position.toLowerCase().indexOf('b') >= 0 ? 'bottom' : 'top') + ' ' + (i.position.toLowerCase().indexOf('l') >= 0 ? 'left' : 'right')), i.direction && (K.direction = i.direction.toLowerCase().indexOf('h') >= 0 ? 'horizontal' : 'vertical'), void S())
    },
    t.fn.PopupWindow = function (u, c) {
      if ('string' != typeof u) return this.each(function () {
        i(t(this), u)
      });
      switch (u.toLowerCase()) {
        case 'init':
          return this.each(function () {
            i(t(this), c)
          });
        case 'open':
          return this.each(function () {
            o(t(this).closest('.popupwindow'))
          });
        case 'close':
          return this.each(function () {
            n(t(this).closest('.popupwindow'))
          });
        case 'maximize':
          return this.each(function () {
            a(t(this).closest('.popupwindow'))
          });
        case 'unmaximize':
          return this.each(function () {
            s(t(this).closest('.popupwindow'))
          });
        case 'collapse':
          return this.each(function () {
            r(t(this).closest('.popupwindow'))
          });
        case 'uncollapse':
          return this.each(function () {
            d(t(this).closest('.popupwindow'))
          });
        case 'minimize':
          return this.each(function () {
            p(t(this).closest('.popupwindow'))
          });
        case 'unminimize':
          return this.each(function () {
            l(t(this).closest('.popupwindow'))
          });
        case 'getposition':
          return this[0] ? w(t(this[0]).closest('.popupwindow')) : e;
        case 'setposition':
          return this.each(function () {
            var e = t(this).closest('.popupwindow');
            return !V(e) || void g(e, t.extend({
            }, c, {
              check: !0,
              event: !0
            }), !0)
          });
        case 'getsize':
          return this[0] ? b(t(this[0]).closest('.popupwindow')) : e;
        case 'setsize':
          return this.each(function () {
            var e = t(this).closest('.popupwindow');
            return !V(e) || void t.when(_(e, t.extend({
            }, c, {
              check: !0,
              event: !0,
              external: !0
            }), !0)).done(function () {
              y(e)
            })
          });
        case 'getstate':
          return this[0] ? I(t(this[0]).closest('.popupwindow')) : e;
        case 'setstate':
          return this.each(function () {
            Y(t(this).closest('.popupwindow'), c)
          });
        case 'settitle':
          return this.each(function () {
            X(t(this).closest('.popupwindow'), c)
          });
        case 'statusbar':
          return this.each(function () {
            H(t(this).closest('.popupwindow'), c)
          });
        case 'destroy':
          return this.each(function () {
            h(t(this).closest('.popupwindow'))
          })
      }
    },
    t(function () {
      q = t('<div>', {
        'class': 'popupwindow_container'
      }).css(R.container).appendTo('body'),
      S(),
      t(window).on('resize', function () {
        t(document).find('.popupwindow').each(function () {
          var e = t(this);
          e.data('settings').keepInViewport && e.data('opened') && !e.data('minimized') && !e.data('maximized') && k(e)
        })
      })
    })
  }(jQuery);
  